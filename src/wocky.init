#! /bin/bash

#	The MIT License (MIT)
#	Copyright (C) 2012 ShoreTel Inc.
#
#	Permission is hereby granted, free of charge, to any person obtaining a copy
#	of this software and associated documentation files (the "Software"), to deal
#	in the Software without restriction, including without limitation the rights
#	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#	copies of the Software, and to permit persons to whom the Software is
#	furnished to do so, subject to the following conditions:
#
#	The above copyright notice and this permission notice shall be included in
#	all copies or substantial portions of the Software.
#
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#	THE SOFTWARE.
#
# A sample init script for managing an erld application
#

# Uncomment and edit this if you're running from an environment that doesn't have HOME set (such as during boot):
# HOME=/home/somedir

PREFIX="/opt/wocky"

NAME="{{release_name}}"
DESC="Wocky IM"
ERLD="/usr/bin/erld"
ERLD_LOG="$PREFIX/log/erld.log"
ERL_BIN_DIR="$PREFIX/erts-{{release_erts_version}}/bin"
ERL="$ERL_BIN_DIR/erl +Ktrue +B -noinput"
REL_DIR="$PREFIX/releases/{{release_version}}"
ERL_CONFIG="$REL_DIR/sys.config"
ERL_BOOT="$REL_DIR/$NAME"
COOKIE_FILE="$PREFIX/etc/$NAME/cookie"
NODE="$NAME"
TMPNODE="$NODE-tmp"
FULLNODE="'$NODE@`hostname -f`'"
TIMEOUT=60 # Wait for one minute for the app to come up
HEARTBEAT=22 # erld heartbeat timeout, seconds
HEARTBEAT_WARN=8 # erld slow heartbeat warning, seconds
GRACE=10 # erld kill grace period, seconds
RESTART_COUNT=3 # erld restart limit (number of successive "quick" crashes before giving up)
RESTART_INTERVAL=1200 # erld restart interval (time that's considered a "quick" crash) (1200 seconds = 20 minutes)
PIDFILE=$PREFIX/var/run/$NAME.pid
LOCKDIR=$PREFIX/var/lock
LOCKFILE=$LOCKDIR/$NAME
COOKIE_MODULE=wocky_app

# Add erld's location and params:
export ERL_LIBS=/usr/lib/erlang/lib
export ERL_MAX_PORTS=250000
export ERL_FULLSWEEP_AFTER=2

# This module:function will be called when erld receives a SIGHUP
ROTATION_MODULE=erld_logger
ROTATION_FUNCTION=rotate_logs

RETVAL=0
# Set to -d to enable debugging of erld.
ERLD_DEBUG=""

VM_PARAMS="+K true +A 5 +P 10000000 -sasl sasl_error_logger false"

ERL_COMMAND="$ERL -config $ERL_CONFIG -name $NODE -boot $ERL_BOOT -shutdown_time 5000 $VM_PARAMS"
ERLD_COMMAND="$ERLD $ERLD_DEBUG -c $COOKIE_FILE -l $ERLD_LOG -p $PIDFILE -t $HEARTBEAT -T $HEARTBEAT_WARN -g $GRACE -r $RESTART_COUNT -i $RESTART_INTERVAL -M $ROTATION_MODULE -F $ROTATION_FUNCTION -- $ERL_COMMAND"

cd $PREFIX

success() {
    echo "OK"
    RETVAL=0
}

failure() {
    echo "FAILED (check erld.log for errors)"
    RETVAL=1
}

waitstop() {
    pid=$1
    echo -n "(wait for $pid:"

    count=0
    ps -p $pid > /dev/null
    dead=$?
    while [[ "$dead" -eq "0" && "$count" -lt "10" ]]; do
        echo -n '.'
        sleep 1
        (( count++ ))
        ps -p $pid > /dev/null
        dead=$?
    done
    echo -n ') '
    # If it didn't shut down nicely, we get nasty
    if [ "$dead" -eq "0" ]; then
        echo -e "\nWARNING: Failed to gracefully shut down $NAME node.  Resorting to killing it harshly."
        kill -9 $pid
    fi
}

test -x $START || exit 0

start() {
    # Make sure epmd is running. There's no harm in running it several times and it doesn't
    # need to be stopped so just run it simply here every time.
    $ERL_BIN_DIR/epmd -daemon
    bake_cookie
    echo -n "Starting the $DESC server... "
    $ERLD_COMMAND
    if [ "$?" -eq "0" ]; then
        success
        [ -d $LOCKDIR ] || mkdir -p $LOCKDIR
        touch $LOCKFILE
    else
        failure
    fi
}

bake_cookie() {
    touch $COOKIE_FILE
    chmod o= $COOKIE_FILE
    chmod g=r $COOKIE_FILE
    $ERL -boot start_clean -noshell -eval "io:fwrite(\"~s\", [$COOKIE_MODULE:bake_cookie()])." -s init stop > $COOKIE_FILE
}

stop() {
    if [ -r $PIDFILE ]; then
        echo -n "Stopping the $DESC server "
        pid=`cat $PIDFILE`
        $ERL -boot start_clean -name $TMPNODE -eval "erld_remote:stop(\"$NAME\", $COOKIE_MODULE)."
        if [ "$?" -eq "0" ] ; then
            waitstop $pid
            rm -f $LOCKFILE
            rm -f $PIDFILE
            success
        else
            failure
        fi

    else
        echo "$DESC already stopped"
    fi
}

condrestart() {
    [ -e $LOCKFILE ] && stop && start
}

condstart() {
    [ -e $LOCKFILE ] || start
}

condstop() {
    [ -e $LOCKFILE ] && stop
}

# Status result codes as defined by LSB
status() {
    echo -n "The $DESC server is "
    if [ -e $LOCKFILE ]; then
        if [ -e $PIDFILE ]; then
            pid=`cat $PIDFILE`
            if ps -p $pid > /dev/null; then
                # running and pid file exists
                echo "running"
                RETVAL=0
            else
                # not running but pid file exists
                echo "dead but $LOCKFILE and $PIDFILE exist"
                RETVAL=1
            fi
        else
            # not running, no pid file
            echo "dead but $LOCKFILE file eixsts"
            RETVAL=2
        fi
    else
        # no lock file
        echo "not running"
        RETVAL=3
    fi
}

show()
{
    echo "The server is started in the following environmnent:"
    echo "(HOME is already set when running interactively.)"
    echo "export HOME='$HOME'"
    echo "The command used to start the server is:"
    echo "$ERLD_COMMAND" | sed 's/\"/\\&/g'
    echo "The command run by erld is:"
    echo "$ERL_COMMAND" | sed 's/\"/\\&/g'
    echo "To run without overriding the error logger remove the \"-config\" option."
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    condstop)
        condstop
        ;;
    condstart)
        condstart
        ;;
    condrestart)
        condrestart
        ;;
    status)
        status
        ;;
    show)
        show
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|condrestart|condstop|show|status}"
        exit 1
esac

exit $RETVAL
