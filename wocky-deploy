#!/bin/sh

wocky_env="${1}"
shift

REVISION="${1:-"${CI_COMMIT_ID}"}"
shift

if [ "${wocky_env}" = "" ] || [ "${REVISION}" = "" ]; then
  script=$(basename "${0}")
  echo "Usage: ${script} <namespace> <revision> [extra_args]"
  echo "  namespace - the Kubernetes namespace (required)"
  echo "  revision - the revision for this deployment (required)"
  echo "  extra_args - if supplied, this is passed directly to kubernetes-deploy"
  exit
fi

if echo "${CI_COMMIT_MESSAGE}" | fgrep -qi "[skip deploy]"; then
  echo "Skipping deployment."
  exit
fi

context="${CONTEXT:-"aws"}"
namespace="wocky-${wocky_env}"
template_dir="k8s/${wocky_env}"
watcher_sha="$(cat DB_WATCHER_VERSION)"

export REVISION
export KUBECONFIG="${KUBECONFIG:-"${HOME}/.kube/config"}"

CLUSTER_CONF=/tmp/cluster.tfstate.json
SSL_CONF=/tmp/ssl.tfstate.json
OUTPUT_BINDINGS=/tmp/bindings.json

aws s3 cp s3://hippware-terraform-state/cluster/terraform.tfstate ${CLUSTER_CONF}
aws s3 cp s3://hippware-terraform-state/ssl/terraform.tfstate ${SSL_CONF}
jq -s '[.[].modules[0].outputs] | add' ${CLUSTER_CONF} ${SSL_CONF} > ${OUTPUT_BINDINGS}

kubernetes-deploy "${namespace}" "${context}" \
  --template-dir="${template_dir}" \
  --bindings=watcher_sha="${watcher_sha}" \
  --bindings=@${OUTPUT_BINDINGS} \
  "$@"

pod=$(kubectl get pods \
  -n "${namespace}" \
  -l 'app=wocky' \
  -o jsonpath='{.items[0].metadata.name}')

if [ "${CI_COMMIT_MESSAGE}" != "" ]; then
  msg="Last commit: ${CI_COMMIT_MESSAGE}"
fi

# Add a tag to mark the image as the current one deployed on the environment
MANIFEST=$(aws ecr batch-get-image --region us-west-2 --repository-name hippware/wocky --image-ids imageTag=${REVISION} --query 'images[].imageManifest' --output text)
aws ecr put-image --region us-west-2 --repository-name hippware/wocky --image-tag deployed-${wocky_env} --image-manifest "$MANIFEST"

echo "Pod: ${pod}"
kubectl exec -it -n "${namespace}" "${pod}" bin/wocky notify_complete "${msg}"
